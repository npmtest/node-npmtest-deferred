{"/home/travis/build/npmtest/node-npmtest-deferred/test.js":"/* istanbul instrument in package npmtest_deferred */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-deferred/lib.npmtest_deferred.js":"/* istanbul instrument in package npmtest_deferred */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_deferred = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_deferred = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-deferred/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-deferred && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_deferred */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_deferred\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_deferred.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_deferred.rollup.js'] =\n            local.assetsDict['/assets.npmtest_deferred.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_deferred.__dirname +\n                    '/lib.npmtest_deferred.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/index.js":"// This construct deferred with all needed goodies that are being exported\n// when we import 'deferred' by main name.\n// All available promise extensions are also initialized.\n\n'use strict';\n\nvar call   = Function.prototype.call\n  , assign = require('es5-ext/object/assign');\n\nmodule.exports = assign(require('./deferred'), {\n\tinvokeAsync:   require('./invoke-async'),\n\tisPromise:     require('./is-promise'),\n\tdynamicQueue:  require('./dynamic-queue'),\n\tvalidPromise:  require('./valid-promise'),\n\tcallAsync:     call.bind(require('./ext/function/call-async')),\n\tdelay:         call.bind(require('./ext/function/delay')),\n\tgate:          call.bind(require('./ext/function/gate')),\n\tmonitor:       require('./monitor'),\n\tpromisify:     call.bind(require('./ext/function/promisify')),\n\tpromisifySync: call.bind(require('./ext/function/promisify-sync')),\n\tevery:         call.bind(require('./ext/array/every')),\n\tfind:          call.bind(require('./ext/array/find')),\n\tmap:           call.bind(require('./ext/array/map')),\n\treduce:        call.bind(require('./ext/array/reduce')),\n\tsome:          call.bind(require('./ext/array/some'))\n}, require('./profiler'));\n\nrequire('./ext/promise/aside');\nrequire('./ext/promise/catch');\nrequire('./ext/promise/cb');\nrequire('./ext/promise/finally');\nrequire('./ext/promise/get');\nrequire('./ext/promise/invoke');\nrequire('./ext/promise/invoke-async');\nrequire('./ext/promise/map');\nrequire('./ext/promise/spread');\nrequire('./ext/promise/some');\nrequire('./ext/promise/reduce');\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/deferred.js":"// Returns function that returns deferred or promise object.\n//\n// 1. If invoked without arguments then deferred object is returned\n//    Deferred object consist of promise (unresolved) function and resolve\n//    function through which we resolve promise\n// 2. If invoked with one argument then promise is returned which resolved value\n//    is given argument. Argument may be any value (even undefined),\n//    if it's promise then same promise is returned\n// 3. If invoked with more than one arguments then promise that resolves with\n//    array of all resolved arguments is returned.\n\n'use strict';\n\nvar isError    = require('es5-ext/error/is-error')\n  , noop       = require('es5-ext/function/noop')\n  , isPromise  = require('./is-promise')\n\n  , every = Array.prototype.every, push = Array.prototype.push\n\n  , Deferred, createDeferred, count = 0, timeout, extendShim, ext\n  , protoSupported = Boolean(isPromise.__proto__)\n  , resolve, assimilate;\n\nextendShim = function (promise) {\n\text._names.forEach(function (name) {\n\t\tpromise[name] = function () {\n\t\t\treturn promise.__proto__[name].apply(promise, arguments);\n\t\t};\n\t});\n\tpromise.returnsPromise = true;\n\tpromise.resolved = promise.__proto__.resolved;\n};\n\nresolve = function (value, failed) {\n\tvar promise = function (win, fail) { return promise.then(win, fail); };\n\tpromise.value = value;\n\tpromise.failed = failed;\n\tpromise.__proto__ = ext._resolved;\n\tif (!protoSupported) { extendShim(promise); }\n\tif (createDeferred._profile) createDeferred._profile(true);\n\treturn promise;\n};\n\nDeferred = function () {\n\tvar promise = function (win, fail) { return promise.then(win, fail); };\n\tif (!count) timeout = setTimeout(noop, 1e9);\n\t++count;\n\tif (createDeferred._monitor) promise.monitor = createDeferred._monitor();\n\tpromise.__proto__ = ext._unresolved;\n\tif (!protoSupported) extendShim(promise);\n\t(createDeferred._profile && createDeferred._profile());\n\tthis.promise = promise;\n\tthis.resolve = this.resolve.bind(this);\n\tthis.reject = this.reject.bind(this);\n};\n\nDeferred.prototype = {\n\tresolved: false,\n\t_settle: function (value) {\n\t\tvar i, name, data, deps, dPromise, nuDeps;\n\t\tthis.promise.value = value;\n\t\tthis.promise.__proto__ = ext._resolved;\n\t\tif (!protoSupported) this.promise.resolved = true;\n\t\tdeps = this.promise.dependencies;\n\t\tdelete this.promise.dependencies;\n\t\twhile (deps) {\n\t\t\tfor (i = 0; (dPromise = deps[i]); ++i) {\n\t\t\t\tdPromise.value = value;\n\t\t\t\tdPromise.failed = this.failed;\n\t\t\t\tdPromise.__proto__ = ext._resolved;\n\t\t\t\tif (!protoSupported) dPromise.resolved = true;\n\t\t\t\tdelete dPromise.pending;\n\t\t\t\tif (dPromise.dependencies) {\n\t\t\t\t\tif (!nuDeps) nuDeps = dPromise.dependencies;\n\t\t\t\t\telse push.apply(nuDeps, dPromise.dependencies);\n\t\t\t\t\tdelete dPromise.dependencies;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdeps = nuDeps;\n\t\t\tnuDeps = null;\n\t\t}\n\t\tif ((data = this.promise.pending)) {\n\t\t\tfor (i = 0; (name = data[i]); ++i) {\n\t\t\t\text._onresolve[name].apply(this.promise, data[++i]);\n\t\t\t}\n\t\t\tdelete this.promise.pending;\n\t\t}\n\t\treturn this.promise;\n\t},\n\tresolve: function (value) {\n\t\tif (this.resolved) return this.promise;\n\t\tthis.resolved = true;\n\t\tif (!--count) clearTimeout(timeout);\n\t\tif (this.promise.monitor) clearTimeout(this.promise.monitor);\n\t\tvalue = assimilate(value);\n\t\tif (isPromise(value)) {\n\t\t\tif (!value.resolved) {\n\t\t\t\tif (!value.dependencies) {\n\t\t\t\t\tvalue.dependencies = [];\n\t\t\t\t}\n\t\t\t\tvalue.dependencies.push(this.promise);\n\t\t\t\tif (this.promise.pending) {\n\t\t\t\t\tif (value.pending) {\n\t\t\t\t\t\tthis.promise.pending.forEach(function (promise) { value.pending.push(promise); });\n\t\t\t\t\t\tthis.promise.pending = value.pending;\n\t\t\t\t\t\tif (this.promise.dependencies) {\n\t\t\t\t\t\t\tthis.promise.dependencies.forEach(function self(dPromise) {\n\t\t\t\t\t\t\t\tdPromise.pending = value.pending;\n\t\t\t\t\t\t\t\tif (dPromise.dependencies) {\n\t\t\t\t\t\t\t\t\tdPromise.dependencies.forEach(self);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue.pending = this.promise.pending;\n\t\t\t\t\t}\n\t\t\t\t} else if (value.pending) {\n\t\t\t\t\tthis.promise.pending = value.pending;\n\t\t\t\t} else {\n\t\t\t\t\tthis.promise.pending = value.pending = [];\n\t\t\t\t}\n\t\t\t\treturn this.promise;\n\t\t\t}\n\t\t\tthis.promise.failed = value.failed;\n\t\t\tvalue = value.value;\n\t\t}\n\t\treturn this._settle(value);\n\t},\n\treject: function (error) {\n\t\tif (this.resolved) return this.promise;\n\t\tthis.resolved = true;\n\t\tif (!--count) clearTimeout(timeout);\n\t\tif (this.promise.monitor) clearTimeout(this.promise.monitor);\n\t\tthis.promise.failed = true;\n\t\treturn this._settle(error);\n\t}\n};\n\nmodule.exports = createDeferred = function (value) {\n\tvar l = arguments.length, d, waiting, initialized, result;\n\tif (!l) return new Deferred();\n\tif (l > 1) {\n\t\td = new Deferred();\n\t\twaiting = 0;\n\t\tresult = new Array(l);\n\t\tevery.call(arguments, function (value, index) {\n\t\t\tvalue = assimilate(value);\n\t\t\tif (!isPromise(value)) {\n\t\t\t\tresult[index] = value;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (value.resolved) {\n\t\t\t\tif (value.failed) {\n\t\t\t\t\td.reject(value.value);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tresult[index] = value.value;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t++waiting;\n\t\t\tvalue.done(function (value) {\n\t\t\t\tresult[index] = value;\n\t\t\t\tif (!--waiting && initialized) d.resolve(result);\n\t\t\t}, d.reject);\n\t\t\treturn true;\n\t\t});\n\t\tinitialized = true;\n\t\tif (!waiting) d.resolve(result);\n\t\treturn d.promise;\n\t}\n\tvalue = assimilate(value);\n\tif (isPromise(value)) return value;\n\treturn resolve(value, isError(value));\n};\n\ncreateDeferred.Deferred = Deferred;\ncreateDeferred.reject = function (value) { return resolve(value, true); };\ncreateDeferred.resolve = function (value) {\n\tvalue = assimilate(value);\n\tif (isPromise(value)) return value;\n\treturn resolve(value, false);\n};\next = require('./_ext');\nassimilate = require('./assimilate');\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/is-promise.js":"// Whether given object is a promise\n\n'use strict';\n\nmodule.exports = function (o) {\n\treturn (typeof o === 'function') && (typeof o.then === 'function') && (o.end !== o.done);\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/_ext.js":"'use strict';\n\nvar callable   = require('es5-ext/object/valid-callable')\n  , d          = require('d')\n  , isCallable = require('es5-ext/object/is-callable')\n  , ee         = require('event-emitter')\n  , isPromise  = require('./is-promise')\n\n  , create = Object.create, defineProperty = Object.defineProperty\n  , deferred, resolve, reject;\n\nmodule.exports = exports = function (name, unres, onres, res) {\n\tname = String(name);\n\t(callable(res) && ((onres == null) || callable(onres)) && callable(unres));\n\tdefineProperty(exports._unresolved, name, d(unres));\n\texports._onresolve[name] = onres;\n\tdefineProperty(exports._resolved, name, d(res));\n\texports._names.push(name);\n};\n\nexports._names = ['done', 'then', 'valueOf'];\n\nexports._unresolved = ee(create(Function.prototype, {\n\tthen: d(function (win, fail) {\n\t\tvar def;\n\t\tif (!this.pending) this.pending = [];\n\t\tdef = deferred();\n\t\tthis.pending.push('then', [win, fail, def.resolve, def.reject]);\n\t\treturn def.promise;\n\t}),\n\tdone: d(function (win, fail) {\n\t\t((win == null) || callable(win));\n\t\t((fail == null) || callable(fail));\n\t\tif (!this.pending) this.pending = [];\n\t\tthis.pending.push('done', arguments);\n\t}),\n\tresolved: d(false),\n\treturnsPromise: d(true),\n\tvalueOf: d(function () { return this; })\n}));\n\nexports._onresolve = {\n\tthen: function (win, fail, resolve, reject) {\n\t\tvar value, cb = this.failed ? fail : win;\n\t\tif (cb == null) {\n\t\t\tif (this.failed) reject(this.value);\n\t\t\telse resolve(this.value);\n\t\t\treturn;\n\t\t}\n\t\tif (isCallable(cb)) {\n\t\t\tif (isPromise(cb)) {\n\t\t\t\tif (cb.resolved) {\n\t\t\t\t\tif (cb.failed) reject(cb.value);\n\t\t\t\t\telse resolve(cb.value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcb.done(resolve, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry { value = cb(this.value); } catch (e) {\n\t\t\t\treject(e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresolve(value);\n\t\t\treturn;\n\t\t}\n\t\tresolve(cb);\n\t},\n\tdone: function (win, fail) {\n\t\tif (this.failed) {\n\t\t\tif (fail) {\n\t\t\t\tfail(this.value);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow this.value;\n\t\t}\n\t\tif (win) win(this.value);\n\t}\n};\n\nexports._resolved = ee(create(Function.prototype, {\n\tthen: d(function (win, fail) {\n\t\tvar value, cb = this.failed ? fail : win;\n\t\tif (cb == null) return this;\n\t\tif (isCallable(cb)) {\n\t\t\tif (isPromise(cb)) return cb;\n\t\t\ttry { value = cb(this.value); } catch (e) { return reject(e); }\n\t\t\treturn resolve(value);\n\t\t}\n\t\treturn resolve(cb);\n\t}),\n\tdone: d(function (win, fail) {\n\t\t((win == null) || callable(win));\n\t\t((fail == null) || callable(fail));\n\t\tif (this.failed) {\n\t\t\tif (fail) {\n\t\t\t\tfail(this.value);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow this.value;\n\t\t}\n\t\tif (win) win(this.value);\n\t}),\n\tresolved: d(true),\n\treturnsPromise: d(true),\n\tvalueOf: d(function () { return this.value; })\n}));\n\ndeferred = require('./deferred');\nresolve = deferred.resolve;\nreject = deferred.reject;\ndeferred.extend = exports;\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/assimilate.js":"// Assimilate eventual foreign promise\n\n'use strict';\n\nvar isObject  = require('es5-ext/object/is-object')\n  , isPromise = require('./is-promise')\n  , deferred  = require('./deferred')\n  , nextTick  = require('next-tick')\n\n  , getPrototypeOf = Object.getPrototypeOf;\n\nmodule.exports = function self(value) {\n\tvar then, done, def, resolve, reject;\n\tif (!value) return value;\n\ttry {\n\t\tthen = value.then;\n\t} catch (e) {\n\t\treturn value;\n\t}\n\tif (typeof then !== 'function') return value;\n\tif (isPromise(value)) return value;\n\tif (!isObject(value)) return value;\n\tif (!getPrototypeOf(value)) return value;\n\ttry {\n\t\tdone = value.done;\n\t} catch (ignore) {}\n\tdef = deferred();\n\tresolve = function (value) { def.resolve(self(value)); };\n\treject = function (value) { def.reject(value); };\n\tif (typeof done === 'function') {\n\t\ttry {\n\t\t\tdone.call(value, resolve, reject);\n\t\t} catch (e) {\n\t\t\treturn def.reject(e);\n\t\t}\n\t\treturn def.promise;\n\t}\n\ttry {\n\t\tthen.call(value, function (value) { nextTick(function () {\n\t\t\tresolve(value);\n\t\t}); }, function (value) { nextTick(function () {\n\t\t\treject(value);\n\t\t}); });\n\t} catch (e) {\n\t\treturn def.reject(e);\n\t}\n\treturn def.promise;\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/invoke-async.js":"// Invoke asynchronous function\n\n'use strict';\n\nvar isCallable = require('es5-ext/object/is-callable')\n  , callable   = require('es5-ext/object/valid-callable')\n  , value      = require('es5-ext/object/valid-value')\n  , callAsync  = require('./ext/function/call-async')._base\n\n  , slice = Array.prototype.slice;\n\nmodule.exports = function (obj, fn/*, …args*/) {\n\tvalue(obj);\n\tif (!isCallable(fn)) fn = callable(obj[fn]);\n\treturn callAsync(fn, null, obj, slice.call(arguments, 2));\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/function/call-async.js":"// Call asynchronous function\n\n'use strict';\n\nvar toArray          = require('es5-ext/array/to-array')\n  , callable         = require('es5-ext/object/valid-callable')\n  , deferred         = require('../../deferred')\n  , isPromise        = require('../../is-promise')\n  , processArguments = require('../_process-arguments')\n\n  , slice = Array.prototype.slice, apply = Function.prototype.apply\n\n  , applyFn, callAsync;\n\napplyFn = function (fn, args, def) {\n\targs = toArray(args);\n\tapply.call(fn,  this, args.concat(function (error, result) {\n\t\tif (error == null) {\n\t\t\tdef.resolve((arguments.length > 2) ? slice.call(arguments, 1) : result);\n\t\t} else {\n\t\t\tdef.reject(error);\n\t\t}\n\t}));\n};\n\ncallAsync = function (fn, length, context, args) {\n\tvar def;\n\targs = processArguments(args, length);\n\tif (isPromise(args)) {\n\t\tif (args.failed) return args;\n\t\tdef = deferred();\n\t\targs.done(function (args) {\n\t\t\tif (fn.returnsPromise) return apply.call(fn, context, args);\n\t\t\ttry {\n\t\t\t\tapplyFn.call(context, fn, args, def);\n\t\t\t} catch (e) { def.reject(e); }\n\t\t}, def.reject);\n\t\treturn def.promise;\n\t}\n\tif (fn.returnsPromise) return apply.call(fn, context, args);\n\tdef = deferred();\n\ttry {\n\t\tapplyFn.call(context, fn, args, def);\n\t} catch (e) {\n\t\tdef.reject(e);\n\t\tthrow e;\n\t}\n\treturn def.promise;\n};\n\nmodule.exports = exports = function (context/*, …args*/) {\n\treturn callAsync(callable(this), null, context, slice.call(arguments, 1));\n};\n\nObject.defineProperty(exports, '_base', { configurable: true,\n\tenumerable: false, writable: true, value: callAsync });\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/_process-arguments.js":"'use strict';\n\nvar arrayOf    = require('es5-ext/array/of')\n  , deferred   = require('../deferred')\n  , isPromise  = require('../is-promise')\n  , assimilate = require('../assimilate')\n\n  , push = Array.prototype.push, slice = Array.prototype.slice;\n\nmodule.exports = function (args, length) {\n\tvar i, l, arg;\n\tif ((length != null) && (args.length !== length)) {\n\t\targs = slice.call(args, 0, length);\n\t\tif (args.length < length) {\n\t\t\tpush.apply(args, new Array(length - args.length));\n\t\t}\n\t}\n\tfor (i = 0, l = args.length; i < l; ++i) {\n\t\targ = assimilate(args[i]);\n\t\tif (isPromise(arg)) {\n\t\t\tif (!arg.resolved) {\n\t\t\t\tif (l > 1) return deferred.apply(null, args);\n\t\t\t\treturn arg(arrayOf);\n\t\t\t}\n\t\t\tif (arg.failed) return arg;\n\t\t\targs[i] = arg.value;\n\t\t}\n\t}\n\treturn args;\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/dynamic-queue.js":"// Dynamic queue handler\n// Allows to create a promise queue, where new promises can be added to queue until last promise in\n// a queue resolves. Queue promise resolves with `undefined` value, when last promises resolves.\n\n'use strict';\n\nvar aFrom          = require('es5-ext/array/from')\n  , ensureIterable = require('es5-ext/iterable/validate-object')\n  , assign         = require('es5-ext/object/assign')\n  , deferred       = require('./deferred')\n  , isPromise      = require('./is-promise')\n  , assimilate     = require('./assimilate')\n\n  , DynamicQueue;\n\nmodule.exports = DynamicQueue = function (list) {\n\tif (!(this instanceof DynamicQueue)) return new DynamicQueue(list);\n\tlist = aFrom(ensureIterable(list));\n\n\tassign(this, deferred());\n\tlist.every(this.add, this);\n\tif (!this.waiting) {\n\t\tthis.resolve();\n\t\treturn;\n\t}\n\tthis.initialized = true;\n};\n\nDynamicQueue.prototype = {\n\twaiting: 0,\n\tinitialized: false,\n\tadd: function (value) {\n\t\tif (this.promise.resolved) throw new Error(\"Queue was already resolved\");\n\t\t++this.waiting;\n\t\tvalue = assimilate(value);\n\t\tif (isPromise(value)) {\n\t\t\tif (!value.resolved) {\n\t\t\t\tvalue.done(this._processValue.bind(this), this.reject);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (value.failed) {\n\t\t\t\tthis.reject(value.value);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn this._processValue();\n\t},\n\t_processValue: function () {\n\t\tif (this.promise.resolved) return;\n\t\tif (!--this.waiting && this.initialized) this.resolve();\n\t\treturn true;\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/valid-promise.js":"'use strict';\n\nvar isPromise = require('./is-promise');\n\nmodule.exports = function (x) {\n\tif (!isPromise(x)) {\n\t\tthrow new TypeError(x + \" is not a promise object\");\n\t}\n\treturn x;\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/function/delay.js":"// Delay function execution, return promise for delayed function result\n\n'use strict';\n\nvar callable      = require('es5-ext/object/valid-callable')\n  , nextTick      = require('next-tick')\n  , ensureTimeout = require('timers-ext/valid-timeout')\n  , deferred      = require('../../deferred')\n\n  , apply    = Function.prototype.apply\n  , delayed;\n\ndelayed = function (fn, args, resolve, reject) {\n\tvar value;\n\ttry {\n\t\tvalue = apply.call(fn, this, args);\n\t} catch (e) {\n\t\treject(e);\n\t\treturn;\n\t}\n\tresolve(value);\n};\n\nmodule.exports = function (timeout) {\n\tvar fn, result, delay;\n\tfn = callable(this);\n\tif (timeout == null) {\n\t\tdelay = nextTick;\n\t} else {\n\t\ttimeout = ensureTimeout(timeout);\n\t\tdelay = setTimeout;\n\t}\n\tresult = function () {\n\t\tvar def = deferred();\n\t\tdelay(delayed.bind(this, fn, arguments, def.resolve, def.reject), timeout);\n\t\treturn def.promise;\n\t};\n\tresult.returnsPromise = true;\n\treturn result;\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/function/gate.js":"// Limit number of concurrent function executions (to cLimit number).\n// Limited calls are queued. Optionaly maximum queue length can also be\n// controlled with qLimit value, any calls that would reach over that limit\n// would be discarded (its promise would resolve with \"Too many calls\" error)\n\n'use strict';\n\nvar toPosInt   = require('es5-ext/number/to-pos-integer')\n  , callable   = require('es5-ext/object/valid-callable')\n  , eeUnify    = require('event-emitter/unify')\n  , deferred   = require('../../deferred')\n  , isPromise  = require('../../is-promise')\n  , assimilate = require('../../assimilate')\n\n  , resolve = deferred.resolve, reject = deferred.reject\n  , apply = Function.prototype.apply, max = Math.max\n  , gateReject;\n\nrequire('../promise/finally');\n\ngateReject = function () {\n\tvar e = new Error(\"Too many calls\");\n\te.type = 'deferred-gate-rejected';\n\treturn reject(e);\n};\n\nmodule.exports = function (cLimit, qLimit) {\n\tvar fn, count, decrement, unload, queue, run, result;\n\tfn = callable(this);\n\tcLimit = max(toPosInt(cLimit), 1);\n\tqLimit = ((qLimit == null) || isNaN(qLimit)) ? Infinity : toPosInt(qLimit);\n\tcount = 0;\n\tqueue = [];\n\n\trun = function (thisArg, args, def) {\n\t\tvar r;\n\t\ttry {\n\t\t\tr = apply.call(fn, thisArg, args);\n\t\t} catch (e) {\n\t\t\tif (!def) return reject(e);\n\t\t\tdef.reject(e);\n\t\t\tunload();\n\t\t\treturn;\n\t\t}\n\t\tr = assimilate(r);\n\t\tif (isPromise(r)) {\n\t\t\tif (def) eeUnify(def.promise, r);\n\t\t\tif (!r.resolved) {\n\t\t\t\t++count;\n\t\t\t\tif (def) def.resolve(r);\n\t\t\t\treturn r.finally(decrement);\n\t\t\t}\n\t\t\tr = r.value;\n\t\t}\n\t\tif (!def) return resolve(r);\n\t\tdef.resolve(r);\n\t\tunload();\n\t};\n\n\tdecrement = function () {\n\t\t--count;\n\t\tunload();\n\t};\n\n\tunload = function () {\n\t\tvar data;\n\t\tif ((data = queue.shift())) run.apply(null, data);\n\t};\n\n\tresult = function () {\n\t\tvar def;\n\t\tif (count >= cLimit) {\n\t\t\tif (queue.length < qLimit) {\n\t\t\t\tdef = deferred();\n\t\t\t\tqueue.push([this, arguments, def]);\n\t\t\t\treturn def.promise;\n\t\t\t}\n\t\t\treturn gateReject();\n\t\t}\n\t\treturn run(this, arguments);\n\t};\n\tresult.returnsPromise = true;\n\treturn result;\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/finally.js":"// 'finally' - Promise extension\n//\n// promise.finally(cb)\n//\n// Called on promise resolution returns same promise, doesn't pass any values to\n// provided callback\n\n'use strict';\n\nvar callable = require('es5-ext/object/valid-callable')\n  , deferred = require('../../deferred');\n\ndeferred.extend('finally', function (cb) {\n\tcallable(cb);\n\tif (!this.pending) this.pending = [];\n\tthis.pending.push('finally', arguments);\n\treturn this;\n}, function (cb) { cb(); }, function (cb) {\n\tcallable(cb)();\n\treturn this;\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/monitor.js":"// Run if you want to monitor unresolved promises (in properly working\n// application there should be no promises that are never resolved)\n\n'use strict';\n\nvar max        = Math.max\n  , callable   = require('es5-ext/object/valid-callable')\n  , isCallable = require('es5-ext/object/is-callable')\n  , toPosInt   = require('es5-ext/number/to-pos-integer')\n  , deferred   = require('./deferred');\n\nexports = module.exports = function (timeout, cb) {\n\tif (timeout === false) {\n\t\t// Cancel monitor\n\t\tdelete deferred._monitor;\n\t\tdelete exports.timeout;\n\t\tdelete exports.callback;\n\t\treturn;\n\t}\n\texports.timeout = timeout = max(toPosInt(timeout) || 5000, 50);\n\tif (cb == null) {\n\t\tif ((typeof console !== 'undefined') && console &&\n\t\t\t\tisCallable(console.error)) {\n\t\t\tcb = function (e) {\n\t\t\t\tconsole.error(((e.stack && e.stack.toString()) ||\n\t\t\t\t\t\"Unresolved promise: no stack available\"));\n\t\t\t};\n\t\t}\n\t} else {\n\t\tcallable(cb);\n\t}\n\texports.callback = cb;\n\n\tdeferred._monitor = function () {\n\t\tvar e = new Error(\"Unresolved promise\");\n\t\treturn setTimeout(function () {\n\t\t\tif (cb) cb(e);\n\t\t}, timeout);\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/function/promisify.js":"// Promisify asynchronous function\n\n'use strict';\n\nvar callable  = require('es5-ext/object/valid-callable')\n  , callAsync = require('./call-async')._base;\n\nmodule.exports = function (length) {\n\tvar fn, result;\n\tfn = callable(this);\n\tif (fn.returnsPromise) return fn;\n\tif (length != null) length = length >>> 0;\n\tresult = function () { return callAsync(fn, length, this, arguments); };\n\tresult.returnsPromise = true;\n\treturn result;\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/function/promisify-sync.js":"// Promisify synchronous function\n\n'use strict';\n\nvar callable         = require('es5-ext/object/valid-callable')\n  , deferred         = require('../../deferred')\n  , isPromise        = require('../../is-promise')\n  , processArguments = require('../_process-arguments')\n\n  , apply = Function.prototype.apply\n\n  , applyFn;\n\napplyFn = function (fn, args, resolve, reject) {\n\tvar value;\n\ttry {\n\t\tvalue = apply.call(fn, this, args);\n\t} catch (e) {\n\t\treject(e);\n\t\treturn;\n\t}\n\tresolve(value);\n};\n\nmodule.exports = function (length) {\n\tvar fn, result;\n\tfn = callable(this);\n\tif (fn.returnsPromise) return fn;\n\tif (length != null) length = length >>> 0;\n\tresult = function () {\n\t\tvar args, def;\n\t\targs = processArguments(arguments, length);\n\n\t\tif (isPromise(args)) {\n\t\t\tif (args.failed) return args;\n\t\t\tdef = deferred();\n\t\t\targs.done(function (args) {\n\t\t\t\tapplyFn.call(this, fn, args, def.resolve, def.reject);\n\t\t\t}.bind(this), def.reject);\n\t\t} else {\n\t\t\tdef = deferred();\n\t\t\tapplyFn.call(this, fn, args, def.resolve, def.reject);\n\t\t}\n\n\t\treturn def.promise;\n\t};\n\tresult.returnsPromise = true;\n\treturn result;\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/array/every.js":"// Promise aware Array's every\n\n'use strict';\n\nmodule.exports = require('../../lib/some-every')(false);\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/lib/some-every.js":"// Promise aware Array's some\n\n'use strict';\n\nvar assign     = require('es5-ext/object/assign')\n  , value      = require('es5-ext/object/valid-value')\n  , callable   = require('es5-ext/object/valid-callable')\n  , deferred   = require('../deferred')\n  , isPromise  = require('../is-promise')\n  , assimilate = require('../assimilate')\n\n  , call = Function.prototype.call\n  , resolve = deferred.resolve;\n\nmodule.exports = function (resolvent) {\n\tvar Iterator = function (list, cb, context) {\n\t\tthis.list = list;\n\t\tthis.cb = cb;\n\t\tthis.context = context;\n\t\tthis.length = list.length >>> 0;\n\n\t\twhile (this.current < this.length) {\n\t\t\tif (this.current in list) {\n\t\t\t\tassign(this, deferred());\n\t\t\t\tthis.processCb = this.processCb.bind(this);\n\t\t\t\tthis.processValue = this.processValue.bind(this);\n\t\t\t\tthis.continue();\n\t\t\t\treturn this.promise;\n\t\t\t}\n\t\t\t++this.current;\n\t\t}\n\t\treturn resolve(!resolvent);\n\t};\n\n\tIterator.prototype = {\n\t\tcurrent: 0,\n\t\tstate: false,\n\t\tcontinue: function () {\n\t\t\tvar result;\n\t\t\twhile (!this.state) {\n\t\t\t\tresult = this.process();\n\t\t\t\tif (this.state !== 'cb') break;\n\t\t\t\tresult = this.processCb(result);\n\t\t\t\tif (this.state !== 'value') break;\n\t\t\t\tthis.processValue(result);\n\t\t\t}\n\t\t},\n\t\tprocess: function () {\n\t\t\tvar value = assimilate(this.list[this.current]);\n\t\t\tif (isPromise(value)) {\n\t\t\t\tif (!value.resolved) {\n\t\t\t\t\tvalue.done(function (result) {\n\t\t\t\t\t\tresult = this.processCb(result);\n\t\t\t\t\t\tif (this.state !== 'value') return;\n\t\t\t\t\t\tthis.processValue(result);\n\t\t\t\t\t\tif (!this.state) this.continue();\n\t\t\t\t\t}.bind(this), this.reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (value.failed) {\n\t\t\t\t\tthis.reject(value.value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvalue = value.value;\n\t\t\t}\n\t\t\tthis.state = 'cb';\n\t\t\treturn value;\n\t\t},\n\t\tprocessCb: function (value) {\n\t\t\tif (this.cb) {\n\t\t\t\ttry {\n\t\t\t\t\tvalue = call.call(this.cb, this.context, value, this.current, this.list);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.reject(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvalue = assimilate(value);\n\t\t\t\tif (isPromise(value)) {\n\t\t\t\t\tif (!value.resolved) {\n\t\t\t\t\t\tvalue.done(function (result) {\n\t\t\t\t\t\t\tthis.state = 'value';\n\t\t\t\t\t\t\tthis.processValue(result);\n\t\t\t\t\t\t\tif (!this.state) this.continue();\n\t\t\t\t\t\t}.bind(this), this.reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (value.failed) {\n\t\t\t\t\t\tthis.reject(value.value);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvalue = value.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.state = 'value';\n\t\t\treturn value;\n\t\t},\n\t\tprocessValue: function (value) {\n\t\t\tif (Boolean(value) === resolvent) {\n\t\t\t\tthis.resolve(resolvent);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twhile (++this.current < this.length) {\n\t\t\t\tif (this.current in this.list) {\n\t\t\t\t\tthis.state = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.resolve(!resolvent);\n\t\t}\n\t};\n\n\treturn function (cb/*, thisArg*/) {\n\t\tvalue(this);\n\t\t((cb == null) || callable(cb));\n\n\t\treturn new Iterator(this, cb, arguments[1]);\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/array/find.js":"// Promise aware Array's find\n// Additionally differs from some that it returns *first in order* item that matches constraint\n\n'use strict';\n\nvar assign     = require('es5-ext/object/assign')\n  , value      = require('es5-ext/object/valid-value')\n  , callable   = require('es5-ext/object/valid-callable')\n  , deferred   = require('../../deferred')\n  , isPromise  = require('../../is-promise')\n  , assimilate = require('../../assimilate')\n\n  , call = Function.prototype.call\n  , resolve = deferred.resolve\n  , Find;\n\nFind = function (list, cb, context) {\n\tthis.list = list;\n\tthis.cb = cb;\n\tthis.context = context;\n\tthis.length = list.length >>> 0;\n\n\twhile (this.current < this.length) {\n\t\tif (this.current in list) {\n\t\t\tassign(this, deferred());\n\t\t\tthis.processCb = this.processCb.bind(this);\n\t\t\tthis.process();\n\t\t\treturn this.promise;\n\t\t}\n\t\t++this.current;\n\t}\n\treturn resolve(undefined);\n};\n\nFind.prototype = {\n\tcurrent: 0,\n\tprocess: function () {\n\t\tvar value = assimilate(this.list[this.current]);\n\t\tif (isPromise(value)) {\n\t\t\tif (!value.resolved) {\n\t\t\t\tvalue.done(this.processCb, this.reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (value.failed) {\n\t\t\t\tthis.reject(value.value);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvalue = value.value;\n\t\t}\n\t\tthis.processCb(value);\n\t},\n\tprocessCb: function (listValue) {\n\t\tvar value;\n\t\tif (this.cb) {\n\t\t\ttry {\n\t\t\t\tvalue = call.call(this.cb, this.context, listValue, this.current, this.list);\n\t\t\t} catch (e) {\n\t\t\t\tthis.reject(e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvalue = assimilate(value);\n\t\t\tif (isPromise(value)) {\n\t\t\t\tif (!value.resolved) {\n\t\t\t\t\tvalue.done(this.processValue.bind(this, listValue), this.reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (value.failed) {\n\t\t\t\t\tthis.reject(value.value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvalue = value.value;\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = listValue;\n\t\t}\n\t\tthis.processValue(listValue, value);\n\t},\n\tprocessValue: function (listValue, value) {\n\t\tif (value) {\n\t\t\tthis.resolve(listValue);\n\t\t\treturn;\n\t\t}\n\t\twhile (++this.current < this.length) {\n\t\t\tif (this.current in this.list) {\n\t\t\t\tthis.process();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.resolve(undefined);\n\t}\n};\n\nmodule.exports = function (cb/*, thisArg*/) {\n\tvalue(this);\n\t((cb == null) || callable(cb));\n\n\treturn new Find(this, cb, arguments[1]);\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/array/map.js":"// Promise aware Array's map\n\n'use strict';\n\nvar assign     = require('es5-ext/object/assign')\n  , value      = require('es5-ext/object/valid-value')\n  , callable   = require('es5-ext/object/valid-callable')\n  , deferred   = require('../../deferred')\n  , isPromise  = require('../../is-promise')\n  , assimilate = require('../../assimilate')\n\n  , every = Array.prototype.every\n  , call = Function.prototype.call\n\n  , DMap;\n\nDMap = function (list, cb, context) {\n\tthis.list = list;\n\tthis.cb = cb;\n\tthis.context = context;\n\tthis.result = new Array(list.length >>> 0);\n\n\tassign(this, deferred());\n\tevery.call(list, this.process, this);\n\tif (!this.waiting) return this.resolve(this.result);\n\tthis.initialized = true;\n\n\treturn this.promise;\n};\n\nDMap.prototype = {\n\twaiting: 0,\n\tinitialized: false,\n\tprocess: function (value, index) {\n\t\t++this.waiting;\n\t\tvalue = assimilate(value);\n\t\tif (isPromise(value)) {\n\t\t\tif (!value.resolved) {\n\t\t\t\tvalue.done(this.processCb.bind(this, index), this.reject);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (value.failed) {\n\t\t\t\tthis.reject(value.value);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvalue = value.value;\n\t\t}\n\t\treturn this.processCb(index, value);\n\t},\n\tprocessCb: function (index, value) {\n\t\tif (this.promise.resolved) return false;\n\t\tif (this.cb) {\n\t\t\ttry {\n\t\t\t\tvalue = call.call(this.cb, this.context, value, index, this.list);\n\t\t\t} catch (e) {\n\t\t\t\tthis.reject(e);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvalue = assimilate(value);\n\t\t\tif (isPromise(value)) {\n\t\t\t\tif (!value.resolved) {\n\t\t\t\t\tvalue.done(this.processValue.bind(this, index), this.reject);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (value.failed) {\n\t\t\t\t\tthis.reject(value.value);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tvalue = value.value;\n\t\t\t}\n\t\t}\n\t\tthis.processValue(index, value);\n\t\treturn true;\n\t},\n\tprocessValue: function (index, value) {\n\t\tif (this.promise.resolved) return;\n\t\tthis.result[index] = value;\n\t\tif (!--this.waiting && this.initialized) this.resolve(this.result);\n\t}\n};\n\nmodule.exports = function (cb/*, thisArg*/) {\n\tvalue(this);\n\t((cb == null) || callable(cb));\n\n\treturn new DMap(this, cb, arguments[1]);\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/array/reduce.js":"// Promise aware Array's reduce\n\n'use strict';\n\nvar assign     = require('es5-ext/object/assign')\n  , value      = require('es5-ext/object/valid-value')\n  , callable   = require('es5-ext/object/valid-callable')\n  , deferred   = require('../../deferred')\n  , isPromise  = require('../../is-promise')\n  , assimilate = require('../../assimilate')\n\n  , call = Function.prototype.call\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , resolve = deferred.resolve\n  , Reduce;\n\nReduce = function (list, cb, initial, initialized) {\n\tthis.list = list;\n\tthis.cb = cb;\n\tthis.initialized = initialized;\n\tthis.length = list.length >>> 0;\n\n\tinitial = assimilate(initial);\n\tif (isPromise(initial)) {\n\t\tif (!initial.resolved) {\n\t\t\tassign(this, deferred());\n\t\t\tinitial.done(function (initial) {\n\t\t\t\tthis.value = initial;\n\t\t\t\tthis.init();\n\t\t\t}.bind(this), this.reject);\n\t\t\treturn this.promise;\n\t\t}\n\t\tthis.value = initial.value;\n\t\tif (initial.failed) return initial;\n\t} else {\n\t\tthis.value = initial;\n\t}\n\n\treturn this.init();\n};\n\nReduce.prototype = {\n\tcurrent: 0,\n\tstate: false,\n\tinit: function () {\n\t\twhile (this.current < this.length) {\n\t\t\tif (hasOwnProperty.call(this.list, this.current)) break;\n\t\t\t++this.current;\n\t\t}\n\t\tif (this.current === this.length) {\n\t\t\tif (!this.initialized) {\n\t\t\t\tthrow new Error(\"Reduce of empty array with no initial value\");\n\t\t\t}\n\t\t\treturn this.resolve ? this.resolve(this.value) : resolve(this.value);\n\t\t}\n\t\tif (!this.promise) assign(this, deferred());\n\t\tthis.processCb = this.processCb.bind(this);\n\t\tthis.processValue = this.processValue.bind(this);\n\t\tthis.continue();\n\t\treturn this.promise;\n\t},\n\tcontinue: function () {\n\t\tvar result;\n\t\twhile (!this.state) {\n\t\t\tresult = this.process();\n\t\t\tif (this.state !== 'cb') break;\n\t\t\tresult = this.processCb(result);\n\t\t\tif (this.state !== 'value') break;\n\t\t\tthis.processValue(result);\n\t\t}\n\t},\n\tprocess: function () {\n\t\tvar value = assimilate(this.list[this.current]);\n\t\tif (isPromise(value)) {\n\t\t\tif (!value.resolved) {\n\t\t\t\tvalue.done(function (result) {\n\t\t\t\t\tresult = this.processCb(result);\n\t\t\t\t\tif (this.state !== 'value') return;\n\t\t\t\t\tthis.processValue(result);\n\t\t\t\t\tif (!this.state) this.continue();\n\t\t\t\t}.bind(this), this.reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (value.failed) {\n\t\t\t\tthis.reject(value.value);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvalue = value.value;\n\t\t}\n\t\tthis.state = 'cb';\n\t\treturn value;\n\t},\n\tprocessCb: function (value) {\n\t\tif (!this.initialized) {\n\t\t\tthis.initialized = true;\n\t\t\tthis.state = 'value';\n\t\t\treturn value;\n\t\t}\n\t\tif (this.cb) {\n\t\t\ttry {\n\t\t\t\tvalue = call.call(this.cb, undefined, this.value, value, this.current,\n\t\t\t\t\tthis.list);\n\t\t\t} catch (e) {\n\t\t\t\tthis.reject(e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvalue = assimilate(value);\n\t\t\tif (isPromise(value)) {\n\t\t\t\tif (!value.resolved) {\n\t\t\t\t\tvalue.done(function (result) {\n\t\t\t\t\t\tthis.state = 'value';\n\t\t\t\t\t\tthis.processValue(result);\n\t\t\t\t\t\tif (!this.state) this.continue();\n\t\t\t\t\t}.bind(this), this.reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (value.failed) {\n\t\t\t\t\tthis.reject(value.value);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvalue = value.value;\n\t\t\t}\n\t\t}\n\t\tthis.state = 'value';\n\t\treturn value;\n\t},\n\tprocessValue: function (value) {\n\t\tthis.value = value;\n\t\twhile (++this.current < this.length) {\n\t\t\tif (hasOwnProperty.call(this.list, this.current)) {\n\t\t\t\tthis.state = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.resolve(this.value);\n\t}\n};\n\nmodule.exports = function (cb/*, initial*/) {\n\tvalue(this);\n\t((cb == null) || callable(cb));\n\n\treturn new Reduce(this, cb, arguments[1], arguments.length > 1);\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/array/some.js":"// Promise aware Array's some\n\n'use strict';\n\nmodule.exports = require('../../lib/some-every')(true);\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/profiler.js":"'use strict';\n\nvar partial  = require('es5-ext/function/#/partial')\n  , forEach  = require('es5-ext/object/for-each')\n  , pad      = require('es5-ext/string/#/pad')\n  , deferred = require('./deferred')\n\n  , resolved, rStats, unresolved, uStats, profile;\n\nexports.profile = function () {\n\tresolved = 0;\n\trStats = {};\n\tunresolved = 0;\n\tuStats = {};\n\tdeferred._profile = profile;\n};\n\nprofile = function (isResolved) {\n\tvar stack, data;\n\n\tif (isResolved) {\n\t\t++resolved;\n\t\tdata = rStats;\n\t} else {\n\t\t++unresolved;\n\t\tdata = uStats;\n\t}\n\n\tstack = (new Error()).stack;\n\tif (!stack.split('\\n').slice(3).some(function (line) {\n\t\t\tif ((line.search(/[\\/\\\\]deferred[\\/\\\\]/) === -1) &&\n\t\t\t\t\t(line.search(/[\\/\\\\]es5-ext[\\/\\\\]/) === -1) &&\n\t\t\t\t\t(line.indexOf(' (native)') === -1)) {\n\t\t\t\tline = line.replace(/\\n/g, \"\\\\n\").trim();\n\t\t\t\tif (!data[line]) {\n\t\t\t\t\tdata[line] = { count: 0 };\n\t\t\t\t}\n\t\t\t\t++data[line].count;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t})) {\n\t\tif (!data.unknown) {\n\t\t\tdata.unknown = { count: 0, stack: stack };\n\t\t}\n\t\t++data.unknown.count;\n\t}\n};\n\nexports.profileEnd = function () {\n\tvar total, lpad, log = '';\n\n\tif (!deferred._profile) {\n\t\tthrow new Error(\"Deferred profiler was not initialized\");\n\t}\n\tdelete deferred._profile;\n\n\tlog += \"------------------------------------------------------------\\n\";\n\tlog += \"Deferred usage statistics:\\n\\n\";\n\n\ttotal = String(resolved + unresolved);\n\tlpad = partial.call(pad, \" \", total.length);\n\tlog += total + \" Total promises initialized\\n\";\n\tlog += lpad.call(unresolved) + \" Initialized as Unresolved\\n\";\n\tlog += lpad.call(resolved) + \" Initialized as Resolved\\n\";\n\n\tif (unresolved) {\n\t\tlog += \"\\nUnresolved promises were initialized at:\\n\";\n\t\tforEach(uStats, function (data, name) {\n\t\t\tlog += lpad.call(data.count) + \" \" + name + \"\\n\";\n\t\t}, null, function (a, b) {\n\t\t\treturn this[b].count - this[a].count;\n\t\t});\n\t}\n\n\tif (resolved) {\n\t\tlog += \"\\nResolved promises were initialized at:\\n\";\n\t\tforEach(rStats, function (data, name) {\n\t\t\tlog += lpad.call(data.count) + \" \" + name + \"\\n\";\n\t\t}, null, function (a, b) {\n\t\t\treturn this[b].count - this[a].count;\n\t\t});\n\t}\n\tlog += \"------------------------------------------------------------\\n\";\n\n\treturn {\n\t\tlog: log,\n\t\tresolved: { count: resolved, stats: rStats },\n\t\tunresolved: { count: unresolved, stats: uStats }\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/aside.js":"// 'aside' - Promise extension\n//\n// promise.aside(win, fail)\n//\n// Works in analogous way as promise function itself (or `then`)\n// but instead of adding promise to promise chain it returns context promise and\n// lets callback carry on with other processing logic\n\n'use strict';\n\nvar callable = require('es5-ext/object/valid-callable')\n  , deferred = require('../../deferred');\n\ndeferred.extend('aside', function (win, fail) {\n\t((win == null) || callable(win));\n\t((fail == null) || callable(fail));\n\tif (win || fail) {\n\t\tif (!this.pending) {\n\t\t\tthis.pending = [];\n\t\t}\n\t\tthis.pending.push('aside', arguments);\n\t}\n\treturn this;\n}, function (win, fail) {\n\tvar cb = this.failed ? fail : win;\n\tif (cb) {\n\t\tcb(this.value);\n\t}\n}, function (win, fail) {\n\tvar cb;\n\t((win == null) || callable(win));\n\t((fail == null) || callable(fail));\n\tcb = this.failed ? fail : win;\n\tif (cb) {\n\t\tcb(this.value);\n\t}\n\treturn this;\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/catch.js":"// 'catch' - Promise extension\n//\n// promise.catch(cb)\n//\n// Same as `then` but accepts only onFail callback\n\n'use strict';\n\nvar isCallable = require('es5-ext/object/is-callable')\n  , validValue = require('es5-ext/object/valid-value')\n  , deferred   = require('../../deferred')\n  , isPromise  = require('../../is-promise')\n\n  , resolve = deferred.resolve, reject = deferred.reject;\n\ndeferred.extend('catch', function (cb) {\n\tvar def;\n\tvalidValue(cb);\n\tif (!this.pending) this.pending = [];\n\tdef = deferred();\n\tthis.pending.push('catch', [cb, def.resolve, def.reject]);\n\treturn def.promise;\n}, function (cb, resolve, reject) {\n\tvar value;\n\tif (!this.failed) {\n\t\tresolve(this.value);\n\t\treturn;\n\t}\n\tif (isCallable(cb)) {\n\t\tif (isPromise(cb)) {\n\t\t\tif (cb.resolved) {\n\t\t\t\tif (cb.failed) reject(cb.value);\n\t\t\t\telse resolve(cb.value);\n\t\t\t} else {\n\t\t\t\tcb.done(resolve, reject);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\ttry { value = cb(this.value); } catch (e) {\n\t\t\treject(e);\n\t\t\treturn;\n\t\t}\n\t\tresolve(value);\n\t\treturn;\n\t}\n\tresolve(cb);\n}, function (cb) {\n\tvar value;\n\tvalidValue(cb);\n\tif (!this.failed) return this;\n\tif (isCallable(cb)) {\n\t\tif (isPromise(cb)) return cb;\n\t\ttry { value = cb(this.value); } catch (e) {\n\t\t\treturn reject(e);\n\t\t}\n\t\treturn resolve(value);\n\t}\n\treturn resolve(cb);\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/cb.js":"// 'cb' - Promise extension\n//\n// promise.cb(cb)\n//\n// Handles asynchronous function style callback (which is run in next event loop\n// the earliest). Returns self promise. Callback is optional.\n//\n// Useful when we want to configure typical asynchronous function which logic is\n// internally configured with promises.\n//\n// Extension can be used as follows:\n//\n// var foo = function (arg1, arg2, cb) {\n//     var d = deferred();\n//     // ... implementation\n//     return d.promise.cb(cb);\n// };\n//\n// `cb` extension returns promise and handles eventual callback (optional)\n\n'use strict';\n\nvar callable   = require('es5-ext/object/valid-callable')\n  , nextTick   = require('next-tick')\n  , deferred   = require('../../deferred');\n\ndeferred.extend('cb', function (cb) {\n\tif (cb == null) return this;\n\tcallable(cb);\n\tnextTick(function () {\n\t\tif (this.resolved) {\n\t\t\tif (this.failed) cb(this.value);\n\t\t\telse cb(null, this.value);\n\t\t} else {\n\t\t\tif (!this.pending) this.pending = [];\n\t\t\tthis.pending.push('cb', [cb]);\n\t\t}\n\t}.bind(this));\n\treturn this;\n}, function (cb) {\n\tif (this.failed) cb(this.value);\n\telse cb(null, this.value);\n}, function (cb) {\n\tif (cb == null) return this;\n\tcallable(cb);\n\tnextTick(function () {\n\t\tif (this.failed) cb(this.value);\n\t\telse cb(null, this.value);\n\t}.bind(this));\n\treturn this;\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/get.js":"// 'get' - Promise extension\n//\n// promise.get(name)\n//\n// Resolves with property of resolved object\n\n'use strict';\n\nvar value    = require('es5-ext/object/valid-value')\n  , deferred = require('../../deferred')\n\n  , reduce = Array.prototype.reduce\n  , resolve = deferred.resolve, reject = deferred.reject;\n\ndeferred.extend('get', function (/*…name*/) {\n\tvar def;\n\tif (!this.pending) this.pending = [];\n\tdef = deferred();\n\tthis.pending.push('get', [arguments, def.resolve, def.reject]);\n\treturn def.promise;\n\n}, function (args, resolve, reject) {\n\tvar result;\n\tif (this.failed) reject(this.value);\n\ttry {\n\t\tresult = reduce.call(args, function (obj, key) {\n\t\t\treturn value(obj)[String(key)];\n\t\t}, this.value);\n\t} catch (e) {\n\t\treject(e);\n\t\treturn;\n\t}\n\tresolve(result);\n}, function (/*…name*/) {\n\tvar result;\n\tif (this.failed) return this;\n\ttry {\n\t\tresult = reduce.call(arguments, function (obj, key) {\n\t\t\treturn value(obj)[String(key)];\n\t\t}, this.value);\n\t} catch (e) {\n\t\treturn reject(e);\n\t}\n\treturn resolve(result);\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/invoke.js":"// 'invoke' - Promise extension\n//\n// promise.invoke(name[, arg0[, arg1[, ...]]])\n//\n// On resolved object calls method that returns immediately.\n// 'name' can be method name or method itself.\n\n'use strict';\n\nvar isCallable       = require('es5-ext/object/is-callable')\n  , deferred         = require('../../deferred')\n  , isPromise        = require('../../is-promise')\n  , processArguments = require('../_process-arguments')\n\n  , slice = Array.prototype.slice, apply = Function.prototype.apply\n  , reject = deferred.reject\n  , applyFn;\n\napplyFn = function (fn, args, resolve, reject) {\n\tvar value;\n\ttry {\n\t\tvalue = apply.call(fn, this, args);\n\t} catch (e) {\n\t\treturn reject(e);\n\t}\n\treturn resolve(value);\n};\n\ndeferred.extend('invoke', function (method/*, …args*/) {\n\tvar def;\n\tif (!this.pending) this.pending = [];\n\tdef = deferred();\n\tthis.pending.push('invoke', [arguments, def.resolve, def.reject]);\n\treturn def.promise;\n}, function (args, resolve, reject) {\n\tvar fn;\n\tif (this.failed) {\n\t\treject(this.value);\n\t\treturn;\n\t}\n\n\tif (this.value == null) {\n\t\treject(new TypeError(\"Cannot use null or undefined\"));\n\t\treturn;\n\t}\n\n\tfn = args[0];\n\tif (!isCallable(fn)) {\n\t\tfn = String(fn);\n\t\tif (!isCallable(this.value[fn])) {\n\t\t\treject(new TypeError(fn + \" is not a function\"));\n\t\t\treturn;\n\t\t}\n\t\tfn = this.value[fn];\n\t}\n\n\targs = processArguments(slice.call(args, 1));\n\tif (isPromise(args)) {\n\t\tif (args.failed) {\n\t\t\treject(args.value);\n\t\t\treturn;\n\t\t}\n\t\targs.done(function (args) {\n\t\t\tapplyFn.call(this, fn, args, resolve, reject);\n\t\t}.bind(this.value), reject);\n\t} else {\n\t\tapplyFn.call(this.value, fn, args, resolve, reject);\n\t}\n}, function (method/*, …args*/) {\n\tvar args, def;\n\tif (this.failed) return this;\n\n\tif (this.value == null) {\n\t\treturn reject(new TypeError(\"Cannot use null or undefined\"));\n\t}\n\n\tif (!isCallable(method)) {\n\t\tmethod = String(method);\n\t\tif (!isCallable(this.value[method])) {\n\t\t\treturn reject(new TypeError(method + \" is not a function\"));\n\t\t}\n\t\tmethod = this.value[method];\n\t}\n\n\targs = processArguments(slice.call(arguments, 1));\n\tif (isPromise(args)) {\n\t\tif (args.failed) return args;\n\t\tdef = deferred();\n\t\targs.done(function (args) {\n\t\t\tapplyFn.call(this, method, args, def.resolve, def.reject);\n\t\t}.bind(this.value), def.reject);\n\t\treturn def.promise;\n\t}\n\treturn applyFn.call(this.value, method, args, deferred, reject);\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/invoke-async.js":"// 'invokeAsync' - Promise extension\n//\n// promise.invokeAsync(name[, arg0[, arg1[, ...]]])\n//\n// On resolved object calls asynchronous method that takes callback\n// (Node.js style).\n// Do not pass callback, it's handled by internal implementation.\n// 'name' can be method name or method itself.\n\n'use strict';\n\nvar toArray          = require('es5-ext/array/to-array')\n  , isCallable       = require('es5-ext/object/is-callable')\n  , deferred         = require('../../deferred')\n  , isPromise        = require('../../is-promise')\n  , processArguments = require('../_process-arguments')\n\n  , slice = Array.prototype.slice, apply = Function.prototype.apply\n  , reject = deferred.reject\n\n  , applyFn;\n\napplyFn = function (fn, args, resolve, reject) {\n\tvar result;\n\tif (fn.returnsPromise) {\n\t\ttry {\n\t\t\tresult = apply.call(fn, this, args);\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t\treturn;\n\t\t}\n\t\treturn resolve(result);\n\t}\n\targs = toArray(args).concat(function (error, result) {\n\t\tif (error == null) {\n\t\t\tresolve((arguments.length > 2) ? slice.call(arguments, 1) : result);\n\t\t} else {\n\t\t\treject(error);\n\t\t}\n\t});\n\ttry {\n\t\tapply.call(fn, this, args);\n\t} catch (e2) {\n\t\treject(e2);\n\t}\n};\n\ndeferred.extend('invokeAsync', function (method/*, …args*/) {\n\tvar def;\n\tif (!this.pending) this.pending = [];\n\tdef = deferred();\n\tthis.pending.push('invokeAsync', [arguments, def.resolve, def.reject]);\n\treturn def.promise;\n}, function (args, resolve, reject) {\n\tvar fn;\n\tif (this.failed) {\n\t\treject(this.value);\n\t\treturn;\n\t}\n\n\tif (this.value == null) {\n\t\treject(new TypeError(\"Cannot use null or undefined\"));\n\t\treturn;\n\t}\n\n\tfn = args[0];\n\tif (!isCallable(fn)) {\n\t\tfn = String(fn);\n\t\tif (!isCallable(this.value[fn])) {\n\t\t\treject(new TypeError(fn + \" is not a function\"));\n\t\t\treturn;\n\t\t}\n\t\tfn = this.value[fn];\n\t}\n\n\targs = processArguments(slice.call(args, 1));\n\tif (isPromise(args)) {\n\t\tif (args.failed) {\n\t\t\treject(args.value);\n\t\t\treturn;\n\t\t}\n\t\targs.done(function (args) {\n\t\t\tapplyFn.call(this, fn, args, resolve, reject);\n\t\t}.bind(this.value), reject);\n\t} else {\n\t\tapplyFn.call(this.value, fn, args, resolve, reject);\n\t}\n}, function (method/*, …args*/) {\n\tvar args, def;\n\tif (this.failed) return this;\n\n\tif (this.value == null) {\n\t\treturn reject(new TypeError(\"Cannot use null or undefined\"));\n\t}\n\n\tif (!isCallable(method)) {\n\t\tmethod = String(method);\n\t\tif (!isCallable(this.value[method])) {\n\t\t\treturn reject(new TypeError(method + \" is not a function\"));\n\t\t}\n\t\tmethod = this.value[method];\n\t}\n\n\targs = processArguments(slice.call(arguments, 1));\n\tif (isPromise(args)) {\n\t\tif (args.failed) return args;\n\t\tdef = deferred();\n\t\targs.done(function (args) {\n\t\t\tapplyFn.call(this, method, args, def.resolve, def.reject);\n\t\t}.bind(this.value), def.reject);\n\t} else if (!method.returnsPromise) {\n\t\tdef = deferred();\n\t\tapplyFn.call(this.value, method, args, def.resolve, def.reject);\n\t} else {\n\t\treturn applyFn.call(this.value, method, args, deferred, reject);\n\t}\n\treturn def.promise;\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/map.js":"// 'map' - Promise extension\n//\n// promise.map(fn[, thisArg[, concurrentLimit]])\n//\n// Promise aware map for array-like results\n\n'use strict';\n\nrequire('./_array')('map', require('../array/map'));\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/_array.js":"// Used by promise extensions that are based on array extensions.\n\n'use strict';\n\nvar callable = require('es5-ext/object/valid-callable')\n  , deferred = require('../../deferred')\n\n  , reject = deferred.reject;\n\nmodule.exports = function (name, ext) {\n\tdeferred.extend(name, function (cb) {\n\t\tvar def;\n\t\t((cb == null) || callable(cb));\n\t\tif (!this.pending) this.pending = [];\n\t\tdef = deferred();\n\t\tthis.pending.push(name, [arguments, def.resolve, def.reject]);\n\t\treturn def.promise;\n\t}, function (args, resolve, reject) {\n\t\tvar result;\n\t\tif (this.failed) {\n\t\t\treject(this.value);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tresult = ext.apply(this.value, args);\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t\treturn;\n\t\t}\n\t\tresolve(result);\n\t}, function (cb) {\n\t\t((cb == null) || callable(cb));\n\t\tif (this.failed) return this;\n\t\ttry {\n\t\t\treturn ext.apply(this.value, arguments);\n\t\t} catch (e) {\n\t\t\treturn reject(e);\n\t\t}\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/spread.js":"// 'spread' - Promise extensions\n//\n// promise.spread(onsuccess, onerror)\n//\n// Matches eventual list result onto function arguments,\n// otherwise works same as 'then' (promise function itself)\n\n'use strict';\n\nvar spread     = require('es5-ext/function/#/spread')\n  , callable   = require('es5-ext/object/valid-callable')\n  , isCallable = require('es5-ext/object/is-callable')\n  , isPromise  = require('../../is-promise')\n  , deferred   = require('../../deferred')\n\n  , resolve = deferred.resolve, reject = deferred.reject;\n\ndeferred.extend('spread', function (win, fail) {\n\tvar def;\n\t((win == null) || callable(win));\n\tif (!win && (fail == null)) return this;\n\tif (!this.pending) this.pending = [];\n\tdef = deferred();\n\tthis.pending.push('spread', [win, fail, def.resolve, def.reject]);\n\treturn def.promise;\n}, function (win, fail, resolve, reject) {\n\tvar cb, value;\n\tcb = this.failed ? fail : win;\n\tif (cb == null) {\n\t\tif (this.failed) reject(this.value);\n\t\telse resolve(this.value);\n\t}\n\tif (isCallable(cb)) {\n\t\tif (isPromise(cb)) {\n\t\t\tif (cb.resolved) {\n\t\t\t\tif (cb.failed) reject(cb.value);\n\t\t\t\telse resolve(cb.value);\n\t\t\t} else {\n\t\t\t\tcb.done(resolve, reject);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (!this.failed) cb = spread.call(cb);\n\t\ttry {\n\t\t\tvalue = cb(this.value);\n\t\t} catch (e) {\n\t\t\treject(e);\n\t\t\treturn;\n\t\t}\n\t\tresolve(value);\n\t} else {\n\t\tresolve(cb);\n\t}\n}, function (win, fail) {\n\tvar cb, value;\n\tcb = this.failed ? fail : win;\n\tif (cb == null) return this;\n\tif (isCallable(cb)) {\n\t\tif (isPromise(cb)) return cb;\n\t\tif (!this.failed) cb = spread.call(cb);\n\t\ttry {\n\t\t\tvalue = cb(this.value);\n\t\t} catch (e) {\n\t\t\treturn reject(e);\n\t\t}\n\t\treturn resolve(value);\n\t}\n\treturn resolve(cb);\n});\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/some.js":"// 'some' - Promise extension\n//\n// promise.some(fn[, thisArg])\n//\n// Promise aware some for array-like results\n\n'use strict';\n\nrequire('./_array')('some', require('../array/some'));\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/ext/promise/reduce.js":"// 'reduce' - Promise extension\n//\n// promise.reduce(fn[, initial])\n//\n// Promise aware reduce for array-like results\n\n'use strict';\n\nrequire('./_array')('reduce', require('../array/reduce'));\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/benchmark/concurrent.js":"'use strict';\n\n// Benchmark comparing performance of promise setups (concurrent)\n// To run it, do following in package path:\n//\n// $ npm install Q when kew bluebird\n// $ node benchmark/concurrent.js\n\nvar generate   = require('es5-ext/array/generate')\n  , forEach    = require('es5-ext/object/for-each')\n  , pad        = require('es5-ext/string/#/pad')\n  , lstat      = require('fs').lstat\n  , Q          = require('Q')\n  , Bluebird   = require('bluebird')\n  , kew        = require('kew')\n  , when       = require('when')\n  , deferred   = require('../')\n\n  , now = Date.now\n  , Deferred = deferred.Deferred\n  , promisify = deferred.promisify\n  , nextTick  = process.nextTick\n\n  , self, time, count = 10000, data = {}, next, tests, def = deferred()\n  , files = generate(count, __filename);\n\nconsole.log(\"Promise overhead (concurrent calls)\", \"x\" + count + \":\\n\");\n\n// Plain\ntests = [function () {\n\tvar i = count, j = count;\n\tself = function () {\n\t\tlstat(__filename, function (err, stats) {\n\t\t\tif (err) throw err;\n\t\t\tif (!--i) next(); // Ignore first\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count;\n\tself = function () {\n\t\tlstat(__filename, function (err, stats) {\n\t\t\tif (err) throw err;\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Base (plain Node.js lstat call)\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n\n// Bluebird\n}, function () {\n\tvar i = count, j = count, dlstat = Bluebird.promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) next(); // Ignore first\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat = Bluebird.promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Bluebird: Promisify (generic wrapper)\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\treturn new Bluebird(function (resolve, reject) {\n\t\t\tlstat(path, function (err, stats) {\n\t\t\t\tif (err) reject(err);\n\t\t\t\telse resolve(stats);\n\t\t\t});\n\t\t});\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) next(); // Ignore first\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\treturn new Bluebird(function (resolve, reject) {\n\t\t\tlstat(path, function (err, stats) {\n\t\t\t\tif (err) reject(err);\n\t\t\t\telse resolve(stats);\n\t\t\t});\n\t\t});\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Bluebird: Dedicated wrapper\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n\n// Kew\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = kew.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function () {\n\t\t\tif (!--i) nextTick(next); // Ignore first\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = kew.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Kew: Dedicated wrapper\"] = now() - time;\n\t\t\t\t// Get out of try/catch clause\n\t\t\t\tnextTick(next);\n\t\t\t}\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\twhile (j--) self();\n\n// Deferred\n}, function () {\n\tvar i = count, j = count, dlstat;\n\tdlstat = function (path) {\n\t\tvar def = new Deferred();\n\t\tlstat(path, function (err, stats) { def.resolve(err || stats); });\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) next(); // Ignore first\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat;\n\tdlstat = function (path) {\n\t\tvar def = new Deferred();\n\t\tlstat(path, function (err, stats) { def.resolve(err || stats); });\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Deferred: Dedicated wrapper\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat = promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) next(); // Ignore first\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat = promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Deferred: Promisify (generic wrapper)\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar dlstat = promisify(lstat);\n\n\ttime = now();\n\tdeferred.map(files, function (name) {\n\t\treturn dlstat(name);\n\t}).done(function () {\n\t\tnext();\n\t});\n}, function () {\n\tvar dlstat = promisify(lstat);\n\n\ttime = now();\n\tdeferred.map(files, function (name) {\n\t\treturn dlstat(name);\n\t}).done(function () { next(); });\n}, function () {\n\tvar dlstat = promisify(lstat);\n\n\ttime = now();\n\tdeferred.map(files, function (name) {\n\t\treturn dlstat(name);\n\t}).done(function () {\n\t\tdata[\"Deferred: Map + Promisify\"] = now() - time;\n\t\tnext();\n\t});\n\n// Q\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = Q.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) next();\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = Q.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Q: Dedicated wrapper\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat = Q.nbind(lstat, null);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) next();\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat = Q.nbind(lstat, null);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"Q: nbind (generic wrapper)\"] = now() - time;\n\t\t\t\t// Get out of try/catch clause\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = when.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function () {\n\t\t\tif (!--i) nextTick(next);\n\t\t}, function (e) {\n\t\t\tnextTick(function () { throw e; });\n\t\t});\n\t};\n\n\ttime = now();\n\twhile (j--) self();\n}, function () {\n\tvar i = count, j = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = when.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function () {\n\t\t\tif (!--i) {\n\t\t\t\tdata[\"When: Dedicated wrapper\"] = now() - time;\n\t\t\t\tnextTick(next);\n\t\t\t}\n\t\t}, function (e) {\n\t\t\tnextTick(function () { throw e; });\n\t\t});\n\t};\n\n\ttime = now();\n\twhile (j--) self();\n}];\n\nnext = function () {\n\tsetTimeout(function () {\n\t\tif (tests.length) {\n\t\t\ttests.shift()();\n\t\t} else {\n\t\t\tdef.resolve();\n\t\t\tforEach(data, function (value, name, obj, index) {\n\t\t\t\tconsole.log(pad.call(index + 1 + \":\", \" \", 3),\n\t\t\t\t\tpad.call(value, \" \", 5) + \"ms \", name);\n\t\t\t}, null, function (a, b) { return this[a] - this[b]; });\n\t\t}\n\t}, 100);\n};\n\nnext();\n","/home/travis/build/npmtest/node-npmtest-deferred/node_modules/deferred/benchmark/one-after-another.js":"'use strict';\n\n// Benchmark comparing overhead introduced by promise implementations\n// (one by after another)\n// To run it, do following in package path:\n//\n// $ npm install Q when kew bluebird\n// $ node benchmark/one-after-another.js\n\nvar forEach    = require('es5-ext/object/for-each')\n  , pad        = require('es5-ext/string/#/pad')\n  , lstat      = require('fs').lstat\n  , Q          = require('Q')\n  , Bluebird   = require('bluebird')\n  , kew        = require('kew')\n  , when       = require('when')\n  , deferred   = require('../')\n\n  , now = Date.now\n  , Deferred = deferred.Deferred, promisify = deferred.promisify\n  , nextTick = process.nextTick\n\n  , self, time, count = 10000, data = {}, next, tests, def = deferred();\n\nconsole.log(\"Promise overhead (calling one after another)\",\n\t\"x\" + count + \":\\n\");\n\n// Base\ntests = [function () {\n\tvar i = count;\n\tself = function () {\n\t\tlstat(__filename, function (err, stats) {\n\t\t\tif (err) throw err;\n\t\t\tif (--i) self(stats);\n\t\t\telse next(); // Ignore first one\n\t\t});\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count;\n\tself = function () {\n\t\tlstat(__filename, function (err, stats) {\n\t\t\tif (err) throw err;\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Base (plain Node.js lstat call)\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\tself();\n\n// Bluebird\n}, function () {\n\tvar i = count, dlstat = Bluebird.promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse next();\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat = Bluebird.promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Bluebird: Promisify (generic wrapper)\"] = now() - time;\n\t\t\t\t// Get out of try/catch clause\n\t\t\t\tnext();\n\t\t\t}\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\treturn new Bluebird(function (resolve, reject) {\n\t\t\tlstat(path, function (err, stats) {\n\t\t\t\tif (err) reject(err);\n\t\t\t\telse resolve(stats);\n\t\t\t});\n\t\t});\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse next();\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\treturn new Bluebird(function (resolve, reject) {\n\t\t\tlstat(path, function (err, stats) {\n\t\t\t\tif (err) reject(err);\n\t\t\t\telse resolve(stats);\n\t\t\t});\n\t\t});\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Bluebird: Dedicated wrapper\"] = now() - time;\n\t\t\t\t// Get out of try/catch clause\n\t\t\t\tnext();\n\t\t\t}\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\tself();\n\n// Kew\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = kew.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse nextTick(next);\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = kew.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Kew: Dedicated wrapper\"] = now() - time;\n\t\t\t\t// Get out of try/catch clause\n\t\t\t\tnextTick(next);\n\t\t\t}\n\t\t}, function (err) { nextTick(function () { throw err; }); });\n\t};\n\ttime = now();\n\tself();\n\n// Deferred\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = new Deferred();\n\t\tlstat(path, function (err, stats) { def.resolve(err || stats); });\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse next(); // Ignore first one\n\t\t});\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = new Deferred();\n\t\tlstat(path, function (err, stats) { def.resolve(err || stats); });\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Deferred: Dedicated wrapper\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat = promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse next(); // Ignore first one\n\t\t});\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat = promisify(lstat);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Deferred: Promisify (generic wrapper)\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\tself();\n\n// Q\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = Q.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse next();\n\t\t});\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = Q.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Q: Dedicated wrapper\"] = now() - time;\n\t\t\t\t// Get out of try/catch clause\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat = Q.nbind(lstat, null);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse next();\n\t\t});\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat = Q.nbind(lstat, null);\n\n\tself = function () {\n\t\tdlstat(__filename).done(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"Q: nbind (generic wrapper)\"] = now() - time;\n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n\t};\n\ttime = now();\n\tself();\n\n// When\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = when.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function (stats) {\n\t\t\tif (--i) self(stats);\n\t\t\telse nextTick(next);\n\t\t}, function (e) { nextTick(function () { throw e; }); });\n\t};\n\ttime = now();\n\tself();\n}, function () {\n\tvar i = count, dlstat;\n\n\tdlstat = function (path) {\n\t\tvar def = when.defer();\n\t\tlstat(path, function (err, stats) {\n\t\t\tif (err) def.reject(err);\n\t\t\telse def.resolve(stats);\n\t\t});\n\t\treturn def.promise;\n\t};\n\n\tself = function () {\n\t\tdlstat(__filename).then(function (stats) {\n\t\t\tif (--i) {\n\t\t\t\tself(stats);\n\t\t\t} else {\n\t\t\t\tdata[\"When: Dedicated wrapper\"] = now() - time;\n\t\t\t\tnextTick(next);\n\t\t\t}\n\t\t}, function (e) { nextTick(function () { throw e; }); });\n\t};\n\ttime = now();\n\tself();\n}];\n\nnext = function () {\n\tsetTimeout(function () {\n\t\tif (tests.length) {\n\t\t\ttests.shift()();\n\t\t} else {\n\t\t\tdef.resolve();\n\t\t\tforEach(data, function (value, name, obj, index) {\n\t\t\t\tconsole.log(pad.call(index + 1 + \":\", \" \", 3),\n\t\t\t\t\tpad.call(value, \" \", 5) + \"ms \", name);\n\t\t\t}, null, function (a, b) { return this[a] - this[b]; });\n\t\t}\n\t}, 100);\n};\n\nnext();\n"}